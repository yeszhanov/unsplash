{"version":3,"file":"static/webpack/static/development/pages/index.js.f1250fb22a6674831ea1.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport ImageWrapper from \"../components/ImageWrapper\"\nimport InfiniteScroll from \"react-infinite-scroller\"\nimport SearchBar from \"../components/SearchBar\"\nimport \"./index.css\"\nconst APP_ID =\n  // \"75c17e375bb7f1947c0d7a32bbb85266511f0b099485492db887fb79c6ef40e6\"\n  \"5fb3168316b9dbcd49a7a52129ae0f48c358dda1915d87bd96f7b7c3a35bf3b2\"\n\nconst Index = () => {\n  const [images, setData] = useState([])\n  const [search, setSearch] = useState(\"\")\n  const [result, setResult] = useState(null)\n  useEffect(() => {\n    getImages()\n  }, [])\n  useEffect(() => {\n    console.log(images)\n  })\n  // useEffect(() => {\n  //   searchImages()\n  // }, [search])\n  const searchImages = () => {\n    axios\n      .get(\n        `https://api.unsplash.com/search/photos/?page=1&per_page=10&query=${search}&client_id=${APP_ID}`,\n      )\n      .then(data => {\n        setData(data.data.results)\n      })\n      .catch(err => {\n        console.log(\"Error happened during fetching!\", err)\n      })\n  }\n  const getImages = (count = 10) => {\n    axios\n      .get(\n        search\n          ? `https://api.unsplash.com/photos/random?client_id=${APP_ID}&count=${count}`\n          : `https://api.unsplash.com/search/photos/?page=1&per_page=10&query=${search}&client_id=${APP_ID}`,\n      )\n      .then(data => {\n        setData([...images, ...data.data])\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  const onSearch = val => {\n    setSearch(val)\n  }\n  return (\n    <div className=\"wrapper\">\n      <SearchBar onSearch={val => onSearch(val)} />\n      <InfiniteScroll\n        loadMore={() => getImages(5)}\n        pageStart={0}\n        hasMore={true}\n        loader={\n          <div className=\"loader\" key={0}>\n            Loading ...\n          </div>\n        }\n      >\n        <div className=\"image-grid\">\n          {images\n            ? images.map((item, idx) => {\n                return <ImageWrapper url={item.urls.small} key={idx} />\n              })\n            : null}\n        </div>\n      </InfiniteScroll>\n    </div>\n  )\n}\n\nexport default Index\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;;;;A","sourceRoot":""}